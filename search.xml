<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/10/hello-world/"/>
      <url>/2023/05/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>欧拉</title>
      <link href="/2021/11/06/ou-la/"/>
      <url>/2021/11/06/ou-la/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排列组合</title>
      <link href="/2021/11/06/pai-lie-zu-he/"/>
      <url>/2021/11/06/pai-lie-zu-he/</url>
      
        <content type="html"><![CDATA[<hr><p>一些关于排列组合的公式</p><h3 id="一般求排列-binom-n-m"><a href="#一般求排列-binom-n-m" class="headerlink" title="一般求排列 $\binom{n}{m}$"></a>一般求排列 $\binom{n}{m}$</h3><p>(1) $C_b^a=C_{b−1}^{a−1}+C_b^{a−1}$ </p><p>根据组合递推式，可以预处理<strong>模数固定且处理的$a,b$较小的组合式</strong>的递推式</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2010</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">//一般也开不了太大,模数根据题意另取</span>ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//预处理</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）$C_b^a = \frac{a!}{b!\times (a-b)!}$ </p><p>利用快速幂求逆元，结合数组可以预处理出除数，加快速度，预处理做法只在模数固定下才可以使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>ll <span class="token function">qmi</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll k<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> a  <span class="token operator">%</span> mod<span class="token punctuation">;</span>        k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>ll q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ivq<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ivq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>        ivq<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qmi</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//之后求答案C a,b 时，就是 q[a] * ivq[b] % mod * ivq[a - b] % mod;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) $lucas$ 定理，在求 $C_b^a\ mod\ p$ 时，如果 $a,b$ 数值太大，可以使用卢卡斯定理压缩时间复杂度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ll <span class="token function">qmi</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll k<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>        k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//线性求逆元，时间复杂度On</span>ll <span class="token function">C</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> a<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans  <span class="token operator">=</span> ans <span class="token operator">*</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>        ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token function">qmi</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//卢卡斯定理，可以压缩时间复杂度到类似O(mod * log(min(a, b)))</span>ll <span class="token function">lucas</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span> ll k<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> mod <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> mod<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">C</span><span class="token punctuation">(</span>n <span class="token operator">%</span> mod<span class="token punctuation">,</span> k <span class="token operator">%</span> mod<span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">lucas</span><span class="token punctuation">(</span>n <span class="token operator">/</span> mod<span class="token punctuation">,</span> k <span class="token operator">/</span> mod<span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4)高精度求组合数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token comment">/*大概思路就是分解上下的质因数个数，之后用高精度乘法解决*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5010</span><span class="token punctuation">;</span><span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//求质数的量</span><span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            primes<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//求某一个阶乘里面的质数p的数量</span><span class="token keyword">int</span> <span class="token function">get_prime_num</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+=</span> n <span class="token operator">/</span> p<span class="token punctuation">;</span>        n <span class="token operator">/=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//高精度乘法</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>c<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token function">get_primes</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_prime_num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get_prime_num</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get_prime_num</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>f<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目：<a href="https://www.acwing.com/problem/content/890/">https://www.acwing.com/problem/content/890/</a></p><p>(5)卡特兰数</p><p><a href="https://www.acwing.com/problem/content/891/">https://www.acwing.com/problem/content/891/</a></p><p>给定 $n$ 个 $0$ 和 $n$ 个 $1$，它们将按照某种顺序排成长度为 $2n$ 的序列，求它们能排列成的所有序列中，能够满足任意前缀序列中 $0$ 的个数都不少于 $1$ 的个数的序列有多少个。</p><p>输出的答案对 $10^9+7$ 取模。</p><p>卡特兰数是排列组合里较长出现的配合容斥的算法，通过将目标转化为图的形式求解全解与非法解，容斥后为正确答案</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">qmi</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>        k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>LL i <span class="token operator">=</span> a<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">,</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">=</span> ans <span class="token operator">*</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>        ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token function">qmi</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展欧几里得算法</title>
      <link href="/2021/10/27/kuo-zhan-ou-ji-li-de-suan-fa/"/>
      <url>/2021/10/27/kuo-zhan-ou-ji-li-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h1><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="梗概"><a href="#梗概" class="headerlink" title="梗概"></a>梗概</h3><p>对于任意两个数$a, b$，两者间必有最大公因子$g$,使得$a = k_1g,b = k_2g$ ;</p><p>可得必有整数$x, y$ 使$ax + by = gcd(a,b)$ </p><h3 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll <span class="token function">exgcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">-=</span> a <span class="token operator">/</span> b <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">find_any_solution</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll c<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">{</span>g <span class="token operator">=</span> <span class="token function">ex_gcd</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">%</span> g<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>x0 <span class="token operator">*=</span> c <span class="token operator">/</span> g<span class="token punctuation">;</span>y0 <span class="token operator">*=</span> c <span class="token operator">/</span> g<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> x0 <span class="token operator">=</span> <span class="token operator">-</span>x0<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> y0 <span class="token operator">=</span> <span class="token operator">-</span>y0<span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="丢番图求解"><a href="#丢番图求解" class="headerlink" title="丢番图求解"></a>丢番图求解</h3><h4 id="丢番图求一个解"><a href="#丢番图求一个解" class="headerlink" title="丢番图求一个解"></a>丢番图求一个解</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//有解返回true，无解返回false</span>bool <span class="token function">find_one_solution</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> ll C<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>C <span class="token operator">%</span> d<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>        x <span class="token operator">*=</span> C <span class="token operator">/</span> d<span class="token punctuation">;</span>    y <span class="token operator">*=</span> C <span class="token operator">/</span> d<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> y <span class="token operator">=</span> <span class="token operator">-</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="扩展欧几里得基本应用"><a href="#扩展欧几里得基本应用" class="headerlink" title="扩展欧几里得基本应用"></a>扩展欧几里得基本应用</h5><p>​    <a href="https://ac.nowcoder.com/acm/contest/21289/A">https://ac.nowcoder.com/acm/contest/21289/A</a></p><p>题目描述：</p><p>求关于 $x$ 的同余方程$ax≡1(mod\ b)$的最小正整数解，若无解，输出”-1”。</p><p>对题目的方程进行变化，可以得到 $a x + b y = 1$ ，故而对其求 $x$ 的最小正整数解即可(中间计算时可能会爆 int  , 故最好用 long long存储 )</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span>using ll  <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span>ll <span class="token function">exgcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">-=</span> a <span class="token operator">/</span> b <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    ll x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    ll d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//此处因为C是1，所以如果b不为1就无解</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//因为d是1，所以b/d = b</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> b <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中国剩余定理（线性同余方程）"><a href="#中国剩余定理（线性同余方程）" class="headerlink" title="中国剩余定理（线性同余方程）"></a>中国剩余定理（线性同余方程）</h3><p>线性同余方程求解是扩展欧几里得的求解应用之一，大意是需要求一个 $x$ , $x$ 满足以下条件   <em>$x$</em> ≡  <strong>$m_i$</strong>  <strong>$(mod\ a_i)$</strong> 形式大体如下</p><p>$$<br>x= \left{ \begin{aligned} m_1\ (mod\ a_1) \ m_2\ (mod\ a_2) \ \vdots \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  \ m_n\ (mod\ a_n) \end{aligned} \right.<br>$$</p><p>对于以上公式，可以进行变形得：</p><p>$$<br>x=\left{ \begin{aligned} m_1 + k_1a_1\ (1) \ m_2+k_2a_2\ (2) \ \vdots \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \   \ m_n + k_na_n\ (n) \end{aligned} \right.<br>$$</p><p>由 $(1)\ (2)$ 可推导得出 ：<br>$$<br>m_1 + k_1a_1 = m_2 + k_2a_2</p><p>​                =&gt; k_1a_1 - k_2a_2 = m_2 - m_1<br>$$<br>通过扩展欧几里得可以求出以上丢番图的一个解 $x_0\ y_0$ $(d = exgcd(a1, a2, x0, y0))$ </p><p>若 $d$ 不能被 $m2 - m1$ 整除，则证明无解（扩展欧几里得里的解释），否则有</p><p>有 $k_1 = x_0 + k \times \lfloor \frac{a2}{d} \rfloor $ </p><p>之后再将 $k_1$ 带入 $(1)$ 可得 ：</p><p>​                $x = m_1 + k_1a_1$</p><p>​                $x = m_1 + (x_0 + k \times \lfloor \frac{a_2}{d} \rfloor) \times a_1$ </p><p>​                $x = m_1 + x_0 \times a_1 + k \times \lfloor \frac{a_1a_2}{d} \rfloor $ </p><p>故可得一个新的关系式：</p><p>​                $x = m_0 + k \times a_0$</p><p>其中：$m_0=m_1 + x_0 \times a_1$ ; $ a_0 = \lfloor \frac{a_1a_2}{d} \rfloor $ </p><p>又因为$d$ 是$a_1a_2$ 的最大公约数，所以 $\lfloor \frac{a_1a_2}{d} \rfloor$ 是$a_1 a_2$ 的最小公倍数，综上，可以不断对线性方程组进行合并，得到最后的答案 $x = m\ (mod\ a)$ </p><hr><h5 id="中国剩余定理基本应用"><a href="#中国剩余定理基本应用" class="headerlink" title="中国剩余定理基本应用"></a>中国剩余定理基本应用</h5><p>求线性方程组的解：（链接）<a href="https://ac.nowcoder.com/acm/contest/21289/D">https://ac.nowcoder.com/acm/contest/21289/D</a></p><p>解线性同余方程组的板子题，注意计算中间值时可能会溢出 $long\ long$ 适当用 $ {__int 128_t} $ 作为中间值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span>using u128 <span class="token operator">=</span> __int128_t<span class="token punctuation">;</span>using ll  <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span>ll <span class="token function">exgcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">-=</span> a <span class="token operator">/</span> b <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token comment">//将第一对a1,m1记录</span>    ll a1<span class="token punctuation">,</span> m1<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a1 <span class="token operator">&gt;&gt;</span> m1<span class="token punctuation">;</span>    <span class="token comment">//标记是否有解</span>    bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token comment">//因为已经读入一对a,m了，所以就循环n-1次就足够了</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll a2<span class="token punctuation">,</span> m2<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a2 <span class="token operator">&gt;&gt;</span> m2<span class="token punctuation">;</span>        <span class="token comment">//扩展欧几里得的计算</span>        ll C <span class="token operator">=</span> <span class="token punctuation">(</span>m2 <span class="token operator">-</span> m1<span class="token punctuation">)</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">;</span>        ll d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否有解</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>C <span class="token operator">%</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//计算答案</span>        ll t <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a2 <span class="token operator">/</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                x0 <span class="token operator">%=</span> t<span class="token punctuation">;</span>        x0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u128<span class="token punctuation">)</span>x0 <span class="token operator">*</span> C <span class="token operator">/</span> d<span class="token punctuation">)</span> <span class="token operator">%</span> t<span class="token punctuation">;</span>        m1 <span class="token operator">+=</span> x0 <span class="token operator">*</span> a1<span class="token punctuation">;</span>        a1 <span class="token operator">*=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m1 <span class="token operator">%</span> a1 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">%</span> a1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><h3 id="丢番图解释"><a href="#丢番图解释" class="headerlink" title="丢番图解释"></a>丢番图解释</h3><p><a href="https://gcuacm.gitee.io/2019/03/18/190318/">https://gcuacm.gitee.io/2019/03/18/190318/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> exgcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>math--primes</title>
      <link href="/2021/10/26/math-primes/"/>
      <url>/2021/10/26/math-primes/</url>
      
        <content type="html"><![CDATA[<h1 id="数论-质数（素数）与约数知识"><a href="#数论-质数（素数）与约数知识" class="headerlink" title="数论 - 质数（素数）与约数知识"></a>数论 - 质数（素数）与约数知识</h1><h2 id="素数相关"><a href="#素数相关" class="headerlink" title="素数相关"></a>素数相关</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>对于一个正整数$n$，除$1$与$n$自身外，不能被其他数整除的数就叫做质数（素数），质数在数论学习里面是一个十分基础重要的知识，务必掌握</p><p>补充:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="素数判断"><a href="#素数判断" class="headerlink" title="素数判断"></a>素数判断</h3><h4 id="朴素版"><a href="#朴素版" class="headerlink" title="朴素版"></a>朴素版</h4><p>此版本可以用于 $int$ 范围内的素数判断</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isprime</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化版"><a href="#优化版" class="headerlink" title="优化版"></a>优化版</h4><p>此版本可以优化循环次数，$long$范围内可用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isprime</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>  <span class="token comment">// 对比较小的数进行特判</span>    <span class="token comment">//对于比较容易判别的数（被2， 3 整除的数）先判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>     <span class="token comment">//之后可以优化循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">6</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> false<span class="token punctuation">;</span>   <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进阶版—素数性测试"><a href="#进阶版—素数性测试" class="headerlink" title="进阶版—素数性测试"></a>进阶版—素数性测试</h4><p>此版本可用于$10^{18}$以下的素数判断，采用费马小定理以及快速幂进行优化，将判别时间压到常数级别，极大程度优化素数判定</p><p>对于费马小定理，当被检测数$n$是素数时，必有$a^{n - 1}\equiv 1(mod \ n)$ </p><p>并且对于素数(除二外，并且小的素数可以通过特判快速排除) $n$ ，$n$ 必是奇数，故可以将$n - 1$分解：</p><p>​                                        $n - 1 \equiv 2^s \times d$         $(d \equiv odd)$</p><p>故而可以以此分解费马小定理的方程：</p><p>​        $a^{n-1} \equiv 1\ (mod \ n)\ \leftrightarrow a^{2^s\times d}\ - 1\equiv 0\ (mod \ n)$  </p><p>​                                        $ \leftrightarrow (a^{2^{s-1} \times d}\ +1)(a^{2^{s-1} \times d\ } - 1) \equiv 0\ (mod\ n)$ </p><p>​                                       $ \leftrightarrow (a^{2^{s-1} \times d}\ +1)(a^{2^{s-2} \times d} + 1)(a^{2^{s-2} \times d} - 1) \equiv 0\ (mod\ n)$ </p><p>​                                        …….</p><p>​                                       $ \leftrightarrow (a^{2^{s-1} \times d}\ +1)(a^{2^{s-2} \times d} + 1)\ …\ (a^d+1)(a^d-1) \equiv 0\ (mod\ n)$ </p><p>由分解可知，如果 $n$ 是一个质数，那么必符合上诉公式，则必有：</p><p>​                                       $a^d \equiv 1\ (mod\ n)$       </p><p>或：</p><p>​                                       $a^{2^r\times d} \equiv -1\ (mod\ n)$                     $(0\leq r\leq s-1)$ </p><p>综上，我们可以选取一个随机数 $a$ $(a \leq n-1)$ ，通过在模 $n$ 情况下进行快速幂，最后检验两种结果的方法判断 $n$ 是否是素数，当然，有一些非素数对于小于也是符合上诉公式的，故需要进行多次素数检验（一般20次）才可判断 $n$ 是素数，并且因为是模以大素数下的计算，快速幂会破 $long\ long$ 故需要开 $uint64_t$ 以及 $__unit128_t $ 作为中间值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">using u64 <span class="token operator">=</span> <span class="token class-name">uint64_t</span><span class="token punctuation">;</span>using u128 <span class="token operator">=</span> __uint128_t<span class="token punctuation">;</span><span class="token comment">// typedef unit64_t ud4;</span><span class="token comment">// typedef __uint128_t u128;</span><span class="token comment">//使用快速幂求出次方</span>u64 <span class="token function">qmi</span><span class="token punctuation">(</span>u64 a<span class="token punctuation">,</span> u64 k<span class="token punctuation">,</span> u64 mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 计算a的k次方在模mod意义下的值</span>    u64 ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    a <span class="token operator">%=</span> mod<span class="token punctuation">;</span><span class="token comment">//防止溢出，控制a小于mod</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>u128<span class="token punctuation">)</span>ans <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>u128<span class="token punctuation">)</span>a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>        k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//对于某一个a,检查n是不是显示出质数的性质(是否符合公式推导),不符合返回true</span>bool <span class="token function">check_prime</span><span class="token punctuation">(</span>u64 n<span class="token punctuation">,</span> u64 a<span class="token punctuation">,</span> u64 d<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    u64 x <span class="token operator">=</span> <span class="token function">qmi</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> x <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>u128<span class="token punctuation">)</span>x <span class="token operator">*</span> x <span class="token operator">%</span> n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//判断n是不是素数，是返回true,不是返回false,测试次数iter一般在10以内即可</span>bool <span class="token function">MillerRabin</span><span class="token punctuation">(</span>u64 n<span class="token punctuation">,</span> <span class="token keyword">int</span> iter <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    u64 d <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//获得s还有d</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        d <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        s<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> iter<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        u64 a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，因为概率性原因，米勒~罗宾素数判定法会存在误差，但通过概率公式推导可以发现，误差概率极小，故可以忽略不计，并且根据素数的性质判断，我们可以先选取排名前几的素数进行素数推理，可以将误差进一步压低为近似为0，可以放心使用</p><p>确定性版本为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">MillerRabin</span><span class="token punctuation">(</span>ud4 n<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    u64 d <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//获得s还有d</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        d <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        s<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//以下基于c++11以上写法，是可以修改成c的</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>u64 a <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> a<span class="token punctuation">)</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> d<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="素数筛法"><a href="#素数筛法" class="headerlink" title="素数筛法"></a>素数筛法</h3><p>补充：在下列筛法中，存在数组元素的定义</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//自定义设置，一般不超过1e6</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//真值表，否为素数，真为合数、</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> primes<span class="token punctuation">;</span><span class="token comment">//素数表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="朴素筛法（时间复杂度过高，不建议用）"><a href="#朴素筛法（时间复杂度过高，不建议用）" class="headerlink" title="朴素筛法（时间复杂度过高，不建议用）"></a>朴素筛法（时间复杂度过高，不建议用）</h4><p>朴素法为对于$1-n$的所有数，进行素数判断，如果是素数就加入素数表</p><p>时间复杂度$n\sqrt{n}$ </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">get_primes</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//此时n为需要筛的1--n的区间大小</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> primes<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isprime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> primes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> primes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="埃式筛法"><a href="#埃式筛法" class="headerlink" title="埃式筛法"></a>埃式筛法</h4><p>埃式筛法时间复杂度为$nlog_2{log_2n}$ 速度较朴素法大幅提高</p><p>该算法通过用质因子对其合数进行筛选，故筛选时需要打真值表(注：真值表长度需要大于n)判别</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">get_primes</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> primes<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            primes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>ll j <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span>                 st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> primes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线性筛法"><a href="#线性筛法" class="headerlink" title="线性筛法"></a>线性筛法</h4><p>此法通过数学推导可证，每一个合数只会被其最小质因数筛除一次，故时间复杂度是$n$,属于极佳筛法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">get_primes</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> primes<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> primes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区间筛法"><a href="#区间筛法" class="headerlink" title="区间筛法"></a>区间筛法</h4><p>这个筛法比较特殊，一般使用于筛大数的一段区间的质数，区间在$1e6-1e7$之间, 最大值不超过int范围，采用埃筛性质，时间复杂度与埃筛接近</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> pres <span class="token operator">=</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token number">1000010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bool st<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//真值表大小对应区间大小</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">get_section_primes</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> pres<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> p<span class="token punctuation">)</span> <span class="token operator">/</span> p <span class="token operator">*</span> p<span class="token punctuation">,</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i <span class="token operator">+=</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span>primes<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">+</span> l <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> primes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> primes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="约数相关"><a href="#约数相关" class="headerlink" title="约数相关"></a>约数相关</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>对于任意一个数字$n$，都拥有约数，<strong>即小于等于$n$并且可$n$其整除的数</strong>，特别的，质数的约数个数为2个</p><h3 id="约数个数"><a href="#约数个数" class="headerlink" title="约数个数"></a>约数个数</h3><p>补充：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1600</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//因为在1e9里面的数，约数个数不会超过1600,(暴力求解过)</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>divs<span class="token punctuation">;</span><span class="token comment">//存每个数的约数个数的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="朴素筛法"><a href="#朴素筛法" class="headerlink" title="朴素筛法"></a>朴素筛法</h4><p>对于任意一个元素$n$,朴素筛法只会循环到最多$\sqrt{n}$ 过，故时间复杂度为$\sqrt{n}$ ,一般适用</p><p>此方法可以求出$n$的所有约数还有约数个数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">get_divs</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> divs<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            divs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">/</span> i <span class="token operator">!=</span> i<span class="token punctuation">)</span> divs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> divs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="约数进阶求法1"><a href="#约数进阶求法1" class="headerlink" title="约数进阶求法1"></a>约数进阶求法1</h3><p>根据题目不同，可以对代码进行不同程度优化，以下为例</p><h4 id="求一个数的所有质因数"><a href="#求一个数的所有质因数" class="headerlink" title="求一个数的所有质因数"></a>求一个数的所有质因数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">get_divs</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isprime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> divs<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            divs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> n <span class="token operator">/=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> divs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> divs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="求一个数的所有质因数以及其个数"><a href="#求一个数的所有质因数以及其个数" class="headerlink" title="求一个数的所有质因数以及其个数"></a>求一个数的所有质因数以及其个数</h4><p>注：$p$为质数，$s$为质数的个数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Factor</span><span class="token punctuation">{</span>    ll p<span class="token punctuation">;</span>    ll s<span class="token punctuation">;</span><span class="token punctuation">}</span>factor<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>法1：单此查询时可用，速度较快，效率较高</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> <span class="token function">get_factor</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> facs<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">,</span> n <span class="token operator">/=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        facs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> cnt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> facs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> facs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>法2：多次查询时用，需要额外打素数表，因为打了素数表的原因，故多次查询下比法一快多</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> primes <span class="token operator">=</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token number">1000010</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此处的数字要比多次查询下的最大根号n略大</span>vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> <span class="token function">get_factor</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> facs<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">%</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">,</span> n <span class="token operator">/=</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        facs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> facs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> facs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="利用以上信息快速求解约数"><a href="#利用以上信息快速求解约数" class="headerlink" title="利用以上信息快速求解约数"></a>利用以上信息快速求解约数</h5><p>基于已经拥有了一个数的所有质因子以及个数，故可用$dfs$排列组合出所有的因子</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>facs<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>divs<span class="token punctuation">,</span> ll u<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> facs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        divs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> facs<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>facs<span class="token punctuation">,</span> divs<span class="token punctuation">,</span> u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">*=</span> facs<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">get_divs</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> facs <span class="token operator">=</span> <span class="token function">get_factor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> divs<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>facs<span class="token punctuation">,</span> divs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> divs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例题：多次询问不同的-n-的约数"><a href="#例题：多次询问不同的-n-的约数" class="headerlink" title="例题：多次询问不同的$n$ 的约数"></a>例题：<strong>多次</strong>询问不同的$n$ 的约数</h4><p>地址：<a href="https://www.acwing.com/problem/content/description/202/">https://www.acwing.com/problem/content/description/202/</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Factor</span><span class="token punctuation">{</span>    ll p<span class="token punctuation">;</span>    ll s<span class="token punctuation">;</span><span class="token punctuation">}</span>factor<span class="token punctuation">;</span>bool st<span class="token punctuation">[</span><span class="token number">100020</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">get_primes</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> primes<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> primes<span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> primes<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> <span class="token function">get_factor</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> facs<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ll cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">%</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">,</span> n <span class="token operator">/=</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            facs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> facs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> facs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>facs<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>divs<span class="token punctuation">,</span> ll u<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> facs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        divs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> facs<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>facs<span class="token punctuation">,</span> divs<span class="token punctuation">,</span> u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">*=</span> facs<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">get_divs</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>factor<span class="token operator">&gt;</span> facs <span class="token operator">=</span> <span class="token function">get_factor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> divs<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>facs<span class="token punctuation">,</span> divs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> divs<span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    primes <span class="token operator">=</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token number">100010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> divs <span class="token operator">=</span> <span class="token function">get_divs</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> divs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> b <span class="token operator">&amp;&amp;</span> c <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> d<span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> learn </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2021/10/23/test/"/>
      <url>/2021/10/23/test/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namesapce std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$ 测试1$ </p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </p>]]></content>
      
      
      
        <tags>
            
            <tag> -&quot;A&quot; -&quot;B&quot; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回忆录</title>
      <link href="/2021/10/22/hui-yi-lu/"/>
      <url>/2021/10/22/hui-yi-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="时光机"><a href="#时光机" class="headerlink" title="时光机"></a>时光机</h2><p>乱写了点东西，不要嫌弃，勉强看看还是ok的，嫌弃也没用！！！</p><h3 id="意外的相遇"><a href="#意外的相遇" class="headerlink" title="意外的相遇"></a>意外的相遇</h3><p><img src="https://hyyyy-1307894960.cos.ap-guangzhou.myqcloud.com/L/%E9%81%87%E8%A7%81.jpg" alt="遇见"></p><p>​    “2019-10-25” 在此之前，我们还只是人生旅途中的过客，如果不是因为这次看电影的活动，不出意外的话我们的关系应该会是”同学“，毕业之后的”应该认识“，再到后面的”陌生人“。现在想想人生真的是很奇妙呢。感谢此次机缘，让我认识了培琳这样一位人间天使；</p><p>​    之后我们的人生故事线开始互相交织，越来越多的事在我们身边发生，我们也开始有了“革命友谊”。总是可恨高三太短，没能再多出去玩乐几次，没能多在操场上漫步，没能多在教室八卦……想着想着又觉得不免觉得可惜起来，但细想起来也算足够，起码我们成为了挚友。对吧；</p><h3 id="毕业-amp-amp-离别"><a href="#毕业-amp-amp-离别" class="headerlink" title="毕业&amp;&amp;离别"></a>毕业&amp;&amp;离别</h3><p><img src="https://hyyyy-1307894960.cos.ap-guangzhou.myqcloud.com/L/%E9%AB%98%E8%80%83%E7%BB%93%E6%9D%9F.jpg" alt="高考结束"></p><p>​    高考终于过去，虽然折磨却也不舍，我记得那一天玩的很开心，勇哥的“麦霸”还有啊生的贵妃醉酒….好了其实也就只有这些模糊记忆了，就不多掰扯了哈哈哈哈哈隔。记得更清楚的还是那个夏天我们两个人的熬夜聊天，我当了半吊子的心灵导师，不过现在看来总归是有用的。我也是在那时才知道，培琳居然和我一样是个悲观主义者，之后我们就如此保持联系，互相诉苦，开导。明明两个人都对自己很失望，但还是互相扶持走下去了，希望以后的培琳也要努力走下去呀，不要轻易对自己失望。妮耶在我看来可是一个会带给人希望的人，每每靠近便觉温暖灿烂，如花木向阳一般；</p><h3 id="祝福"><a href="#祝福" class="headerlink" title="祝福"></a>祝福</h3><p>​    生日快乐呀妮耶，在新的一年要让自己活的更轻松一点呀，日子总归是会好起来的，在这之前，可要对未来充满希望哦！！！迪拜一直都在，树洞一直对培琳开放！！！生日快乐！！！</p><h3 id="文末"><a href="#文末" class="headerlink" title="文末"></a>文末</h3><p>​    这里补充说明一下，博客是这两天机缘巧合才搞起来的，所以才没说，你看名字还是昨天问你的，所以要是哪里不太顺眼啥的，和我无光，它能跑起来就是万幸了的wwwwwww。最后：我的生日礼物在路上了，别急嗷。</p><h4 id="再补个照片补空白"><a href="#再补个照片补空白" class="headerlink" title="再补个照片补空白"></a>再补个照片补空白</h4><p><img src="https://hyyyy-1307894960.cos.ap-guangzhou.myqcloud.com/L/%E6%96%B0%E7%94%9F%E6%B4%BB.jpg" alt="新生活"></p><p>实在没墨水写什么弯弯绕绕的文章了，培琳也懂的对吧，毕竟我们同为天秤“心灵感应”就知道了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生日快乐 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
